# -*- coding: utf-8 -*-
from copy import copy
from math import sqrt
from fpylll import *
import time

# source: https://github.com/Tzumpi1/BKZ_2/blob/HEAD/LLL_FP.cpp
bkz_2_ntl_pruning = [
    [1, 1, 1, 1, 1, 1, 1,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [0.158413, 0.172804, 0.211677, 0.226714, 0.260111, 0.27964, 0.319103, 0.329964, 0.355499, 0.366772, 0.387223, 0.412774, 0.430973, 0.44228, 0.474222,
     0.487395, 0.513515, 0.520666, 0.533657, 0.544764, 0.570794, 0.587126, 0.598154, 0.605092, 0.62471, 0.63875, 0.663992, 0.672189, 0.690816, 0.704527,
     0.717844, 0.727764, 0.735513, 0.742691, 0.768265, 0.774202, 0.796958, 0.802141, 0.820619, 0.830508, 0.852281, 0.858906, 0.871832, 0.876767, 0.891519,
     0.894277, 0.916979, 0.919513, 0.940237, 0.940532],
    [0.168717, 0.192896, 0.212165, 0.223837, 0.269002, 0.29436, 0.324413, 0.335089, 0.360159, 0.376202, 0.398621, 0.413805, 0.435585, 0.442884, 0.46233, 0.474343, 0.512765, 0.525039, 0.544372, 0.560863, 0.57871, 0.595154, 0.601528, 0.6142, 0.641589, 0.648855, 0.680304, 0.688691, 0.704985, 0.708833, 0.723931, 0.732585, 0.755866, 0.771072, 0.784548, 0.791462, 0.829924, 0.845811, 0.854695, 0.858965, 0.871851, 0.880376, 0.885188, 0.887802, 0.911756, 0.913988, 0.918325, 0.919486, 0.952625, 0.952944],
    [0.162795, 0.172546, 0.21972, 0.232156, 0.263248, 0.281081, 0.321292, 0.343326, 0.385825, 0.407185, 0.422466, 0.44503, 0.462569, 0.471939, 0.495201, 0.503983, 0.51867, 0.529763, 0.557827, 0.570885, 0.590724, 0.596891, 0.625297, 0.637895, 0.656608, 0.665881, 0.692311, 0.70807, 0.727727, 0.739999, 0.755656, 0.76816, 0.783623, 0.793689, 0.809143, 0.817057, 0.840927, 0.851919, 0.872609, 0.881441, 0.891491, 0.89606, 0.903935, 0.906936, 0.91628, 0.918562, 0.934729, 0.935649, 0.957438, 0.957574],
    [0.160753, 0.171057, 0.238764, 0.257386, 0.275973, 0.288633, 0.31866, 0.328857, 0.354133, 0.369052, 0.405067, 0.42271, 0.439321, 0.450674, 0.497827, 0.512384, 0.534056, 0.547787, 0.563069, 0.580596, 0.596256, 0.608994, 0.622425, 0.630646, 0.653145, 0.666755, 0.683478, 0.694023, 0.713599, 0.731693, 0.759534, 0.767484, 0.78864, 0.803547, 0.824698, 0.831788, 0.841811, 0.851879, 0.876969, 0.888981, 0.895573, 0.900428, 0.915111, 0.920683, 0.934029, 0.938484, 0.943847, 0.945464, 0.963699, 0.963877],
    [0.181307, 0.205524, 0.270077, 0.302604, 0.327004, 0.343813, 0.374518, 0.394141, 0.406366, 0.419862, 0.447825, 0.457671, 0.472359, 0.482899, 0.508067, 0.514505, 0.545275, 0.552956, 0.570477, 0.586794, 0.604676, 0.614673, 0.624623, 0.638259, 0.663041, 0.669309, 0.696355, 0.707035, 0.732818, 0.744551, 0.760053, 0.767742, 0.806987, 0.825652, 0.838184, 0.85067, 0.864639, 0.873307, 0.893896, 0.905854, 0.916891, 0.922505, 0.933265, 0.936277, 0.9404, 0.941999, 0.949786, 0.950804, 0.969494, 0.969578],
    [0.214426, 0.252644, 0.301593, 0.315764, 0.335732, 0.353957, 0.390616, 0.409404, 0.427716, 0.443599, 0.475309, 0.484126, 0.514655, 0.528104, 0.554715, 0.566422, 0.577757, 0.588242, 0.604978, 0.613869, 0.633516, 0.640547, 0.678054, 0.686453, 0.711526, 0.722405, 0.735872, 0.74986, 0.772968, 0.787552, 0.796693, 0.802808, 0.832201, 0.839982, 0.854536, 0.86729, 0.87828, 0.885318, 0.902765, 0.90861, 0.91537, 0.920798, 0.935634, 0.940547, 0.946108, 0.947174, 0.948455, 0.949012, 0.971616, 0.971696],
    [0.204701, 0.240387, 0.276414, 0.299504, 0.334309, 0.352551, 0.37281, 0.389629, 0.413331, 0.428174, 0.440727, 0.453433, 0.488252, 0.504115, 0.520134, 0.538391, 0.55996, 0.568876, 0.593274, 0.599307, 0.628964, 0.649904, 0.663326, 0.677531, 0.704053, 0.722448, 0.735008, 0.740596, 0.75278, 0.76171, 0.770346, 0.777448, 0.8181, 0.826353, 0.834074, 0.843326, 0.85768, 0.867836, 0.884881, 0.889949, 0.912026, 0.91899, 0.935691, 0.938342, 0.948112, 0.950986, 0.958091, 0.960158, 0.978743, 0.978896],
    [0.182391, 0.199508, 0.244234, 0.266255, 0.293529, 0.314042, 0.330391, 0.346381, 0.384306, 0.405835, 0.442872, 0.464816, 0.489261, 0.501425, 0.524397, 0.536828, 0.557513, 0.569291, 0.588235, 0.602353, 0.629467, 0.648533, 0.661023, 0.678428, 0.692115, 0.702899, 0.717018, 0.726852, 0.746996, 0.760181, 0.784492, 0.797725, 0.806128, 0.817072, 0.842486, 0.850411, 0.867677, 0.877229, 0.896666, 0.906926, 0.919645, 0.927463, 0.935733, 0.94055, 0.950234, 0.953106, 0.96556, 0.96751, 0.980585, 0.981388],
    [0.221479, 0.246223, 0.287889, 0.309424, 0.3497, 0.364573, 0.377501, 0.390184, 0.422914, 0.430694, 0.454035, 0.465466, 0.491072, 0.515517, 0.531574, 0.544786, 0.570671, 0.585461, 0.605503, 0.614945, 0.630411, 0.647181, 0.668105, 0.676661, 0.710412, 0.721894, 0.737622, 0.744476, 0.764671, 0.789081, 0.796656, 0.808393, 0.817955, 0.829949, 0.839019, 0.849478, 0.868268, 0.875362, 0.89404, 0.900554, 0.920056, 0.925856, 0.938312, 0.942894, 0.957746, 0.961082, 0.9693, 0.971201, 0.985506, 0.985877],
    [0.177671, 0.205005, 0.246867, 0.26754, 0.29338, 0.30976, 0.328699, 0.341923, 0.393551, 0.413278, 0.432373, 0.449221, 0.482518, 0.491072, 0.505419, 0.527836, 0.544006, 0.564458, 0.595512, 0.613555, 0.627067, 0.649972, 0.664191, 0.673047, 0.680266, 0.708926, 0.725191, 0.737323, 0.754498, 0.767752, 0.780278, 0.793694, 0.808352, 0.822188, 0.831658, 0.84146, 0.857292, 0.868746, 0.891272, 0.904124, 0.914426, 0.919861, 0.932702, 0.938986, 0.950711, 0.954552, 0.965296, 0.966747, 0.989303, 0.989806],
    [0.154034, 0.193018, 0.246192, 0.264836, 0.300638, 0.31625, 0.33708, 0.367313, 0.380351, 0.408273, 0.424585, 0.446907, 0.464301, 0.483562, 0.498847, 0.516204, 0.535292, 0.548498, 0.564431, 0.591635, 0.598879, 0.611605, 0.643339, 0.651438, 0.663432, 0.672468, 0.703531, 0.724195, 0.735549, 0.747452, 0.760654, 0.772919, 0.789906, 0.808783, 0.837484, 0.847901, 0.877348, 0.885651, 0.895365, 0.904115, 0.91994, 0.928246, 0.943878, 0.950028, 0.960767, 0.967968, 0.973383, 0.975453, 0.991967, 0.992591],
    [0.17276, 0.188923, 0.216311, 0.24064, 0.269172, 0.295842, 0.321507, 0.360126, 0.385203, 0.391821, 0.415051, 0.437722, 0.451838, 0.487603, 0.509601, 0.520109, 0.555338, 0.56291, 0.58579, 0.59997, 0.609548, 0.626575, 0.645857, 0.665574, 0.692844, 0.70691, 0.725508, 0.734851, 0.747465, 0.76057, 0.781334, 0.79581, 0.806456, 0.811926, 0.836929, 0.85605, 0.873116, 0.878852, 0.892641, 0.897289, 0.915637, 0.92292, 0.939011, 0.946932, 0.959548, 0.962614, 0.982744, 0.984086, 0.994241, 0.994805],
    [0.188904, 0.232397, 0.260438, 0.290067, 0.314869, 0.331418, 0.361056, 0.382012, 0.406197, 0.420188, 0.44926, 0.467564, 0.482209, 0.495676, 0.507137, 0.529239, 0.55073, 0.563029, 0.583046, 0.608377, 0.630584, 0.645432, 0.66261, 0.674199, 0.690529, 0.705593, 0.724674, 0.748691, 0.757543, 0.771951, 0.794019, 0.807969, 0.832595, 0.843828, 0.858985, 0.867436, 0.877417, 0.885254, 0.90424, 0.910588, 0.923153, 0.934634, 0.944425, 0.956036, 0.967457, 0.972795, 0.980526, 0.982416, 0.993653, 0.994274],
    [0.152285, 0.187803, 0.222114, 0.244365, 0.303979, 0.331484, 0.36283, 0.38691, 0.406782, 0.42373, 0.438033, 0.45676, 0.496573, 0.518113, 0.539617, 0.558762, 0.577649, 0.586643, 0.605987, 0.619717, 0.641366, 0.658549, 0.665726, 0.678271, 0.691363, 0.703322, 0.724296, 0.737341, 0.751806, 0.767468, 0.78333, 0.794921, 0.80803, 0.818741, 0.849467, 0.859481, 0.874713, 0.888351, 0.900336, 0.91566, 0.929864, 0.939213, 0.9527, 0.962877, 0.970394, 0.976771, 0.984556, 0.987076, 0.995956, 0.996204],
    [0.176202, 0.203937, 0.265673, 0.295211, 0.322367, 0.340329, 0.381, 0.41542, 0.438665, 0.460492, 0.479147, 0.496237, 0.517581, 0.543305, 0.558308, 0.572928, 0.590301, 0.610036, 0.626231, 0.643547, 0.661526, 0.672739, 0.688525, 0.706701, 0.726085, 0.734609, 0.749387, 0.759141, 0.781332, 0.795197, 0.804233, 0.814887, 0.834892, 0.853353, 0.869237, 0.883001, 0.897798, 0.909861, 0.919175, 0.926389, 0.93808, 0.946631, 0.954494, 0.961779, 0.972773, 0.977747, 0.985679, 0.988462, 0.995963, 0.996544],
    [0.174593, 0.207913, 0.254526, 0.296637, 0.327998, 0.366564, 0.394117, 0.417932, 0.440638, 0.462083, 0.474244, 0.503974, 0.524182, 0.534963, 0.54887, 0.556578, 0.571783, 0.586801, 0.600913, 0.618281, 0.645643, 0.657758, 0.668543, 0.691589, 0.709503, 0.718954, 0.732838, 0.754332, 0.776896, 0.788715, 0.79965, 0.816726, 0.82759, 0.849075, 0.868893, 0.885648, 0.895641, 0.901746, 0.921308, 0.930002, 0.942744, 0.95202, 0.964283, 0.968641, 0.976894, 0.982095, 0.99184, 0.994183, 0.998253, 0.998767],
    [0.197048, 0.23833, 0.261482, 0.266641, 0.290854, 0.318289, 0.362154, 0.390196, 0.430542, 0.467162, 0.487569, 0.504246, 0.525159, 0.54563, 0.580928, 0.58751, 0.618524, 0.638077, 0.646086, 0.67159, 0.68387, 0.694005, 0.711823, 0.729891, 0.738479, 0.750235, 0.763228, 0.778772, 0.787494, 0.806435, 0.82693, 0.835249, 0.852136, 0.858957, 0.86698, 0.876982, 0.888717, 0.903496, 0.915532, 0.926721, 0.949551, 0.958758, 0.967987, 0.971912, 0.986628, 0.989587, 0.992259, 0.994535, 0.998671, 0.999565]
]

from math import ceil, floor

def stretch_vector(v, n):
    def get_point(v, x):
        x1 = int(ceil(x))
        x0 = int(floor(x))
        y0 = float(v[x0])
        y1 = float(v[x1])
        if x0 == x1:
            return y0
        else:
            return y0 + (y1-y0)*(x-x0)/float(x1-x0)

    r = []
    scale = float(len(v)-1)/(n-1)
    for i in range(n):
        r.append(get_point(v, i*scale))
    return r


def vector_norm(v):
    return sqrt(sum([x**2 for x in v]))

def test_pruning(A, pruning_vectors):
    l = []
    LLL.reduction(A)
    for i, pruning_vector in enumerate(pruning_vectors):
        B = copy(A)
        t = time.clock()
        v = SVP.shortest_vector(B, pruning=pruning_vector, run_lll=False)
        t = time.clock() - t
        print "%3d: |v|: %.2f, t: %.2f"%(i, vector_norm(v), t)
        l.append(v)
    return l


def test_linear_pruning(A):
    n = A.nrows
    pruning_vectors = []
    pruning_vectors.append([1.0 for _ in range(n)])

    for i in range(1,n):
        pruning_vectors.append(BKZ.Param(n, pruning=i).pruning)

    test_pruning(A, pruning_vectors[::-1])


def test_bkz_2_pruning(A):
    pruning_vectors = []
    n = A.nrows
    for i in range(1,len(bkz_2_ntl_pruning)):
        # adapt convention NTL -> fpLLL
        v = bkz_2_ntl_pruning[i][::-1]
        # stretch to right length
        v = stretch_vector(v, n)
        pruning_vectors.append(v)

    return test_pruning(A, pruning_vectors)

